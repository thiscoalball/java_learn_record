<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           https://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
       ">

<!--  DateSource 使用Spring的数据源替代Mybatis的配置-->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&amp;userSSL=true&amp;rewriteBatchedStatements=true"/>
    <property name="username" value="root"/>
    <property name="password" value="123456"/>
  </bean>
  <!--  sqlSessionFactory    -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
<!--    绑定mybatis配置文件-->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    <property name="mapperLocations" value="classpath:com/jason/mapper/*.xml"/>
  </bean>

<!--  sqlSessionTemplate 就是我们使用的sqlSession-->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
<!--    只能使用构造器注入 因为没有set方法-->
     <constructor-arg index="0" ref="sqlSessionFactory"/>
  </bean>

<!--配置声明式事务-->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <constructor-arg ref="dataSource" />
  </bean>

<!--结合AOP实现事务的织入-->
<!--  配置事务的通知-->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
<!--    给哪些方法配置事务-->
<!--    配置事务的传播特性 propagation="REQUIRED"-->
    <tx:attributes>
      <tx:method name="add" propagation="REQUIRED"/>
      <tx:method name="delete" propagation="REQUIRED"/>
      <tx:method name="update" propagation="REQUIRED"/>
      <tx:method name="query" read-only="true"/>
      <tx:method name="*"/>
    </tx:attributes>
  </tx:advice>

<!--  配置事务切入-->
  <aop:config>
<!--    后面这个表达式意为 织入mapper下的所有类 的 所有方法 的 所有参数-->
    <aop:pointcut id="txPointCut" expression="execution(* com.jason.mapper.*.*(..))"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
  </aop:config>
</beans>